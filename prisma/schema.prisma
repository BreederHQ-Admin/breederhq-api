// BreederHQ â€” Comprehensive Prisma Schema (Baseline v1)
// Purpose: start-from-scratch full schema that covers core Modules (Contacts, Animals, Breeding),
// Capabilities (Organizations, Tags, Custom Fields, Documents), and Finance (Invoices, Payments).
// This file is designed to be applied as a fresh baseline migration in Neon via Prisma.
//
// Notes:
// - Relation names are explicit where helpful to avoid ambiguity.
// - Optional foreign keys with onDelete: SetNull preserve history when parent records are deleted.
// - Tagging, Custom Fields, and Documents use a "targetType + optional FKs" approach for flexibility
//   while keeping indexes reasonable for Postgres.
// - You can trim or extend this to suit your final product scope without breaking the core graph.
//
// Generator / Datasource -------------------------------------------------------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums -----------------------------------------------------------------------

enum Sex {
  FEMALE
  MALE
  UNKNOWN
}

enum Species {
  DOG
  CAT
  HORSE
  OTHER
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  VOID
  PARTIAL
}

enum PaymentMethod {
  CARD
  BANK_TRANSFER
  CASH
  CHECK
  OTHER
}

enum Currency {
  USD
  EUR
  GBP
  OTHER
}

enum TargetType {
  CONTACT
  ORGANIZATION
  ANIMAL
  BREEDING
  OFFSPRING_GROUP
  INVOICE
  PAYMENT
  DOCUMENT
  OTHER
}

enum FieldType {
  TEXT
  NUMBER
  DATE
  BOOLEAN
  SELECT
  MULTISELECT
  JSON
}

// Access & Security (minimal, can be expanded) --------------------------------

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String?
  lastName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles     UserRole[]
  auditLogs AuditLog[]
}

model Role {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users UserRole[]
}

model UserRole {
  userId String
  roleId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

// Core: Organizations, Contacts, Animals --------------------------------------

model Organization {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  contacts  Contact[]
  animals   Animal[]
  breedings Breeding[]

  // Finance
  invoices Invoice[]
  payments Payment[]

  // Metadata
  tags                TagAssignment[]
  customFieldVals     CustomFieldValue[]
  documents           DocumentLink[]
  integrationAccounts IntegrationAccount[]
}

model Contact {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String?
  phone     String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Links
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)

  // Finance
  invoices Invoice[]
  payments Payment[]

  // Metadata
  tags            TagAssignment[]
  customFieldVals CustomFieldValue[]
  documents       DocumentLink[]
}

model Animal {
  id           String    @id @default(cuid())
  name         String
  nickname     String?
  sex          Sex
  species      Species
  breed        String?
  dateOfBirth  DateTime?
  registration String? // registry number if applicable
  microchip    String?   @unique
  color        String?
  notes        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Ownership
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)

  // Histories
  cycleHistories CycleHistory[]

  // Finance back-relations
  invoices     Invoice[]     @relation("AnimalToInvoices")
  invoiceLines InvoiceLine[] @relation("AnimalToInvoiceLines")
  payments     Payment[]     @relation("AnimalToPayments")

  // Breeding links (as Dam/Sire)
  breedingsAsDam  Breeding[] @relation("DamAnimals")
  breedingsAsSire Breeding[] @relation("SireAnimals")

  // Metadata
  tags            TagAssignment[]
  customFieldVals CustomFieldValue[]
  documents       DocumentLink[]
}

model CycleHistory {
  id        String   @id @default(cuid())
  animalId  String
  startDate DateTime
  notes     String?

  animal    Animal   @relation(fields: [animalId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([animalId, startDate])
}

// Breeding & Offspring ---------------------------------------------------------

model Breeding {
  id               String    @id @default(cuid())
  organizationId   String?
  damAnimalId      String?
  sireAnimalId     String?
  plannedDate      DateTime?
  actualDate       DateTime?
  whelpWindowStart DateTime?
  whelpWindowEnd   DateTime?
  location         String?
  status           String? // planned, in_progress, completed, canceled (free-text or enum later)
  notes            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)

  dam  Animal? @relation("DamAnimals", fields: [damAnimalId], references: [id], onDelete: SetNull)
  sire Animal? @relation("SireAnimals", fields: [sireAnimalId], references: [id], onDelete: SetNull)

  // One breeding to one offspring group (optional until birth)
  offspringGroup OffspringGroup? @relation("BreedingToOffspringGroup")

  // Finance back-relations
  invoices     Invoice[]     @relation("BreedingToInvoices")
  invoiceLines InvoiceLine[] @relation("BreedingToInvoiceLines")
  payments     Payment[]     @relation("BreedingToPayments")

  // Metadata
  tags            TagAssignment[]
  customFieldVals CustomFieldValue[]
  documents       DocumentLink[]

  @@index([whelpWindowStart, whelpWindowEnd])
}

model OffspringGroup {
  id        String    @id @default(cuid())
  label     String?
  count     Int?
  birthDate DateTime?
  weanDate  DateTime?
  notes     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // One-to-one to Breeding via explicit FK
  breedingId String?   @unique
  breeding   Breeding? @relation("BreedingToOffspringGroup", fields: [breedingId], references: [id], onDelete: SetNull)

  // Finance back-relations
  invoices     Invoice[]     @relation("OffspringGroupToInvoices")
  invoiceLines InvoiceLine[] @relation("OffspringGroupToInvoiceLines")
  payments     Payment[]     @relation("OffspringGroupToPayments")

  // Metadata
  tags            TagAssignment[]
  customFieldVals CustomFieldValue[]
  documents       DocumentLink[]
}

// Finance: Invoices, Lines, Payments ------------------------------------------

model Invoice {
  id        String        @id @default(cuid())
  number    String        @unique
  status    InvoiceStatus @default(DRAFT)
  currency  Currency      @default(USD)
  issueDate DateTime      @default(now())
  dueDate   DateTime?
  subtotal  Decimal       @db.Decimal(14, 2)
  tax       Decimal       @db.Decimal(14, 2)
  total     Decimal       @db.Decimal(14, 2)
  notes     String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Parties
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)

  contactId String?
  contact   Contact? @relation(fields: [contactId], references: [id], onDelete: SetNull)

  // Context links
  breedingId String?
  breeding   Breeding? @relation("BreedingToInvoices", fields: [breedingId], references: [id], onDelete: SetNull)

  offspringGroupId String?
  offspringGroup   OffspringGroup? @relation("OffspringGroupToInvoices", fields: [offspringGroupId], references: [id], onDelete: SetNull)

  animalId String?
  animal   Animal? @relation("AnimalToInvoices", fields: [animalId], references: [id], onDelete: SetNull)

  // Lines & Payments
  lines    InvoiceLine[]
  payments Payment[]

  // Metadata
  tags               TagAssignment[]
  customFieldVals    CustomFieldValue[]
  documents          DocumentLink[]
  paymentAllocations PaymentAllocation[]

  @@index([status, issueDate])
  @@index([organizationId])
  @@index([contactId])
}

model InvoiceLine {
  id          String   @id @default(cuid())
  invoiceId   String
  description String
  quantity    Int      @default(1)
  unitPrice   Decimal  @db.Decimal(14, 2)
  amount      Decimal  @db.Decimal(14, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  // Context links
  breedingId String?
  breeding   Breeding? @relation("BreedingToInvoiceLines", fields: [breedingId], references: [id], onDelete: SetNull)

  offspringGroupId String?
  offspringGroup   OffspringGroup? @relation("OffspringGroupToInvoiceLines", fields: [offspringGroupId], references: [id], onDelete: SetNull)

  animalId String?
  animal   Animal? @relation("AnimalToInvoiceLines", fields: [animalId], references: [id], onDelete: SetNull)

  @@index([invoiceId])
}

model Payment {
  id         String        @id @default(cuid())
  amount     Decimal       @db.Decimal(14, 2)
  currency   Currency      @default(USD)
  method     PaymentMethod @default(OTHER)
  receivedAt DateTime      @default(now())
  reference  String?
  notes      String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  // Party links
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)

  contactId String?
  contact   Contact? @relation(fields: [contactId], references: [id], onDelete: SetNull)

  // Apply directly to an Invoice (optional) plus allocations if you need split
  invoiceId String?
  invoice   Invoice? @relation(fields: [invoiceId], references: [id], onDelete: SetNull)

  // Context links
  breedingId String?
  breeding   Breeding? @relation("BreedingToPayments", fields: [breedingId], references: [id], onDelete: SetNull)

  offspringGroupId String?
  offspringGroup   OffspringGroup? @relation("OffspringGroupToPayments", fields: [offspringGroupId], references: [id], onDelete: SetNull)

  animalId String?
  animal   Animal? @relation("AnimalToPayments", fields: [animalId], references: [id], onDelete: SetNull)

  // Metadata
  tags              TagAssignment[]
  customFieldVals   CustomFieldValue[]
  documents         DocumentLink[]
  PaymentAllocation PaymentAllocation[]

  @@index([receivedAt])
}

// Optional: split a single payment across multiple invoices
model PaymentAllocation {
  id        String  @id @default(cuid())
  paymentId String
  invoiceId String
  amount    Decimal @db.Decimal(14, 2)

  payment Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@unique([paymentId, invoiceId])
  @@index([invoiceId])
}

// Tags ------------------------------------------------------------------------

model Tag {
  id        String   @id @default(cuid())
  name      String
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  assignments TagAssignment[]

  @@unique([name])
}

model TagAssignment {
  id               String     @id @default(cuid())
  tagId            String
  targetType       TargetType
  // Optional FKs to each type to enable indexing and constraints
  contactId        String?
  organizationId   String?
  animalId         String?
  breedingId       String?
  offspringGroupId String?
  invoiceId        String?
  paymentId        String?

  tag Tag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  contact        Contact?        @relation(fields: [contactId], references: [id], onDelete: SetNull)
  organization   Organization?   @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  animal         Animal?         @relation(fields: [animalId], references: [id], onDelete: SetNull)
  breeding       Breeding?       @relation(fields: [breedingId], references: [id], onDelete: SetNull)
  offspringGroup OffspringGroup? @relation(fields: [offspringGroupId], references: [id], onDelete: SetNull)
  invoice        Invoice?        @relation(fields: [invoiceId], references: [id], onDelete: SetNull)
  payment        Payment?        @relation(fields: [paymentId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([targetType])
  @@index([contactId])
  @@index([organizationId])
  @@index([animalId])
  @@index([breedingId])
  @@index([offspringGroupId])
  @@index([invoiceId])
  @@index([paymentId])
}

// Custom Fields ---------------------------------------------------------------

model CustomFieldDef {
  id          String     @id @default(cuid())
  targetType  TargetType
  key         String
  label       String
  type        FieldType
  // select/multiselect options as JSON when needed
  optionsJson Json?
  isRequired  Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  values CustomFieldValue[]

  @@unique([targetType, key])
}

model CustomFieldValue {
  id               String     @id @default(cuid())
  defId            String
  targetType       TargetType
  valueText        String?
  valueNumber      Float?
  valueBool        Boolean?
  valueDate        DateTime?
  valueJson        Json?
  // Target FKs
  contactId        String?
  organizationId   String?
  animalId         String?
  breedingId       String?
  offspringGroupId String?
  invoiceId        String?
  paymentId        String?

  def CustomFieldDef @relation(fields: [defId], references: [id], onDelete: Cascade)

  contact        Contact?        @relation(fields: [contactId], references: [id], onDelete: SetNull)
  organization   Organization?   @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  animal         Animal?         @relation(fields: [animalId], references: [id], onDelete: SetNull)
  breeding       Breeding?       @relation(fields: [breedingId], references: [id], onDelete: SetNull)
  offspringGroup OffspringGroup? @relation(fields: [offspringGroupId], references: [id], onDelete: SetNull)
  invoice        Invoice?        @relation(fields: [invoiceId], references: [id], onDelete: SetNull)
  payment        Payment?        @relation(fields: [paymentId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([defId])
  @@index([targetType])
}

// Documents -------------------------------------------------------------------

model Document {
  id         String   @id @default(cuid())
  title      String
  mimeType   String?
  sizeBytes  Int?
  // For storage: URL or path. Replace with your storage provider integration later.
  url        String
  uploadedBy String?
  uploadedAt DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  links DocumentLink[]
}

model DocumentLink {
  id               String     @id @default(cuid())
  documentId       String
  targetType       TargetType
  // Target FKs
  contactId        String?
  organizationId   String?
  animalId         String?
  breedingId       String?
  offspringGroupId String?
  invoiceId        String?
  paymentId        String?

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  contact        Contact?        @relation(fields: [contactId], references: [id], onDelete: SetNull)
  organization   Organization?   @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  animal         Animal?         @relation(fields: [animalId], references: [id], onDelete: SetNull)
  breeding       Breeding?       @relation(fields: [breedingId], references: [id], onDelete: SetNull)
  offspringGroup OffspringGroup? @relation(fields: [offspringGroupId], references: [id], onDelete: SetNull)
  invoice        Invoice?        @relation(fields: [invoiceId], references: [id], onDelete: SetNull)
  payment        Payment?        @relation(fields: [paymentId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([documentId])
  @@index([targetType])
}

// Audit Log -------------------------------------------------------------------

model AuditLog {
  id          String     @id @default(cuid())
  actorUserId String?
  action      String
  targetType  TargetType
  targetId    String?
  metadata    Json?
  createdAt   DateTime   @default(now())

  actor User? @relation(fields: [actorUserId], references: [id], onDelete: SetNull)

  @@index([targetType, targetId])
  @@index([actorUserId, createdAt])
}

// External Integrations (stubs for Marketing/eSign/QuickBooks) ----------------

model IntegrationAccount {
  id           String    @id @default(cuid())
  provider     String // "quickbooks", "docusign", "facebook", etc.
  externalId   String? // provider-side id
  label        String?
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)

  @@index([provider])
}
